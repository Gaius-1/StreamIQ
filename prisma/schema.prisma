// Generator: Specifies the code generator for creating the Prisma client.
generator client {
  provider = "prisma-client-js" // Generates a Prisma client for JavaScript.
  previewFeatures = ["fullTextSearch", "fullTextIndex"] // Enables additional preview features.
}

// Datasource: Defines the database connection details.
datasource db {
  provider = "postgresql" // Specifies the type of database as PostgreSQL.
  url      = env("DATABASE_URL") // URL for connecting to the database, typically from an environment variable.
  directUrl = env("DIRECT_URL") // Another URL for connecting to the database directly, also from an environment variable.
  relationMode = "prisma" // Specifies the relation mode.
}

// User Model: Defines a model named User with various fields and relationships.
model User {
  id String @id @default(uuid()) // Primary key field with a default value generated by the uuid() function.
  username String @unique // Unique username field.
  imageUrl String @db.Text // Image URL field stored as TEXT in the database.
  externalUserId String @unique // Unique external user ID field.
  bio String? @db.Text // Nullable bio field stored as TEXT in the database.

  // Relationships with other models.
  following Follow[] @relation("Following") // One-to-many relationship with Follow model.
  followedBy Follow[] @relation("FollowedBy") // One-to-many relationship with Follow model.
  blocking Block[] @relation("Blocking") // One-to-many relationship with Block model.
  blockedBy Block[] @relation("BlockedBy") // One-to-many relationship with Block model.
  stream Stream? // One-to-one relationship with Stream model.

  createdAt DateTime @default(now()) // Field storing the creation timestamp.
  updatedAt DateTime @updatedAt // Field storing the last update timestamp.
}

// Stream Model: Defines a model named Stream with various fields and a relationship.
model Stream {
  id String @id @default(uuid()) // Primary key field with a default value generated by the uuid() function.
  name String @db.Text // Name field stored as TEXT in the database.
  thumbnailUrl String? // Nullable thumbnail URL field.
  ingressId String? @unique // Nullable unique ingress ID field.
  serverUrl String? // Nullable server URL field.
  streamKey String? // Nullable stream key field.

  // Boolean fields with default values.
  isLive Boolean @default(false)
  isChatEnabled Boolean @default(true)
  isChatDelayed Boolean @default(false)
  isChatFollowersOnly Boolean @default(false)

  userId String @unique // Unique user ID field referencing the User model.

  // Relationship with the User model.
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) // Field storing the creation timestamp.
  updatedAt DateTime @updatedAt // Field storing the last update timestamp.

  // Indexes defined on userId and ingressId.
  @@index([userId])
  @@index([ingressId])

  // Full-text index defined on the name field.
  // @@fulltext([name])
}

// Follow Model: Defines a model representing the relationship between users.
model Follow {
  id String @id @default(uuid()) // Primary key field with a default value generated by the uuid() function.
  followerId String // Follower ID field.
  followingId String // Following ID field.

  // Relationships with the User model.
  follower User @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade) // Many-to-one relationship with User model.
  following User @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade) // Many-to-one relationship with User model.

  createdAt DateTime @default(now()) // Field storing the creation timestamp.
  updatedAt DateTime @updatedAt // Field storing the last update timestamp.

  // Unique constraint on followerId and followingId.
  @@unique([followerId, followingId])

  // Indexes defined on followerId and followingId.
  @@index([followerId])
  @@index([followingId])
}

// Block Model: Defines a model representing the blocking relationship between users.
model Block {
  id String @id @default(uuid()) // Primary key field with a default value generated by the uuid() function.
  blockerId String // Blocker ID field.
  blockedId String // Blocked ID field.

  // Relationships with the User model.
  blocker User @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade) // Many-to-one relationship with User model.
  blocked User @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade) // Many-to-one relationship with User model.

  // Unique constraint on blockerId and blockedId.
  @@unique([blockerId, blockedId])

  // Indexes defined on blockerId and blockedId.
  @@index([blockerId])
  @@index([blockedId])
}